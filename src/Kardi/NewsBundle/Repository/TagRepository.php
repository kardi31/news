<?php

namespace Kardi\NewsBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Kardi\AdminBundle\Repository\DataTableRepository;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends DataTableRepository
{
    public function getPopularTags($limit) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('t, tt');
        $qb->addSelect('count(n.id) as cnt');
        $qb->join('t.translations','tt');
        $qb->join('t.news','n');
        $qb->addOrderBy('cnt','DESC');
        $qb->setMaxResults($limit);
        $qb->groupBy('t.id');

        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getTagBySlug($slug) {
        $qb = $this->createQueryBuilder('t');
        $qb->join('t.translations','tt');
        $qb->andWhere('tt.slug like :slug');
        $qb->setParameter('slug', $slug);
        $qb->orderBy('t.id','DESC');
        $qb->setMaxResults(1);

        $query = $qb->getQuery();

        return $query->getOneOrNullResult();
    }


    /**
     * @param array $fields
     * @param array $data
     * @param QueryBuilder|null $queryBuilder
     * @param null|string $locale
     * @return mixed
     */
    public function getDatatableResults(array $fields, array $data, ?QueryBuilder $queryBuilder = null, ?string $locale = null)
    {
        if (!$queryBuilder) {
            $queryBuilder = $this->getTagQueryBuilder($locale);
        }

        return parent::getDatatableResults($fields, $data, $queryBuilder);
    }

    /**
     * @param array $fields
     * @param array $data
     * @param QueryBuilder|null $queryBuilder
     * @param null|string $locale
     * @return mixed
     */
    public function countDatatableResults(array $fields, array $data, ?QueryBuilder $queryBuilder = null, ?string $locale = null)
    {
        if (!$queryBuilder) {
            $queryBuilder = $this->getTagQueryBuilder($locale);
        }

        return parent::countDatatableResults($fields, $data, $queryBuilder);
    }

    /**
     * @param null|string $locale
     * @return QueryBuilder
     */
    private function getTagQueryBuilder(?string $locale): QueryBuilder
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t')
            ->leftJoin('t.translations', 'tt')
            ->andWhere("tt.lang = :locale")
            ->setParameter('locale', $locale);
        return $qb;
    }
}
